##NumPy笔记
###读SciPy and NumPy
####2 NumPy
1.  python处理list是用迭代循环处理，低效;numpy的ndarray类似与list,但只能存储同一种类型的数据,速度快很多
2.  matrix,matrix支持的是矩阵运算。matrix规定智能是2维的，numpy可以不受限制
3.  生成array的方法: `empty()` `array(list)` `zeros(n)` `arrange(n1,n2)``linespace``logspace` `fromstring` **`fromfunction(func,array)`** 等
4.  astype()能够设置元素的数据类型:int,float16,float32等;也能通过指定dtype
5.  reshape() 改变array的形状; ravel()将array拉平(即变成一维);shape()得出形状
6.  recarray可以存储不同类型数据, 需要用dtype显式指定每列的数据类型,可以给每一列命名，并取得每一列的数据
    ```python
	   import numpy as np

	   recarr = np.zeros((2,), dtype=('i2,f4,a10'))
	   col1 = np.arrange(2) + 1
	   col2 = np.arrange(2,dtype=np.float32)
	   col3 = ['hello','world']
	   toadd = zip(col1,col2,col3)
	   recarr[:] = toadd
	   recarr.dtype.names = ('Integers','Floats','String')
    	   recarr('Intergers')   #array([1,2], dtype=int32)
    ```
    
7.  index 用整数列表/数组 布尔数组对元素进行存取,得到新的数组
    ```python
	   arr = np.arange(5)
	   index = np.where(arr > 2) #or index = arr > 2
	   new_arr = arr[index]

	   new_arr = np.delete(arr,index)
    ```
    支持切片;多维数组的切片
8.  index可以用&和|操作

9.  file操作: `loadtxt(filename)` ` savetxt(filename)`
    ```python
	   # example.txt file looks like the following
	   # XR21 32.789 1
	   # XR22 33.091 2

	   table = np.loadtxt('example.txt',
	   dtype='names': ('ID', 'Result', 'Type'),
		  'formats': ('S4', 'f4', 'i2'), align=True)
	   #dtype=[('ID', '|S4'), ('Result', '<f4'), ('Type', '<i2')])
    ```

###读[Python科学计算](http://hyry.dip.jp/tech/book/page/scipy/numpy.html)
####ndarray对象
1.  在上补充了部分。其中关于fromfunction 下面的例子：
    ```python
	   def func(i,j):
		  return (i+1)*(j+1)
	   a = np.fromfunction(func2, (9,9))
    ```
    a是一个九九乘法表的二位数组
2.  上专题9中就是一个**结构数组**的例子;其中类型字符串前的字段:
    *   '|' : 忽视字节顺序
    *   '<' : 低位字节在前，即小端模式(little endian)
    *   '>' : 高位字节在前，即大端模式(big endian)
        
    可以用tofile()或者tostring()将其以二进制的方式转换成字符串或者写入文件;align是设置内存对齐，以便可以用c语言进行处理
    
3.  内存结构:
<img src="./numpy_memory_struct.png" length="800" width="800"/>

####ufunc运算
    ufunc即universal function的缩写,是对数组内每个元素进行操作的函数;
1.  sin(),结果是新建了一个数组保存,可以用out指定计算结果保存的位置;因为是c语言级别的循环，所以比math.sin快很多.item()获得数组元素，并已经转换成了python标准类型了。
2.  四则运算:numpy为数组定义了各种数学运算操作
    + - * / //(对返回的整数取整) -x ** % 
3.  比较和布尔运算
    == >等对两个数组进行运算，返回布尔数组;数组的布尔运算函数名都以logic_开头，如logic_and等.
4.  自定义ufunc函数
    可以用frompyfunc()将一个计算单个元素的函数转换成ufunc函数。就可以方便地用所产生的ufunc函数对数组进行计算了。
    `frompyfunc(func,nin,nout)`,其中`nin`是`func`输入参数的个数，`nout`是返回值个数,例子如下，其中x为数组:
    ```python
	triangle_ufunc1 = np.frompyfunc(triangle_wave, 4, 1)
	y2 = triangle_ufunc1(x, 0.6, 0.4, 1.0)
    ```
    vectorize()也可以实现类似功能，但它可以通过otypes指定返回数组的元素类型
5. 广播:
	当使用ufunc函数对两个数组进行计算时，ufunc函数会对这两个数组的对应元素进行计算，因此它要求这两个数组的形状相同。如果形状不同，会进行如下的广播(broadcasting)处理：
	* 让所有输入数组都向其中维数最多的数组看齐，shape属性中不足的部分都通过在前面加1补齐。
	* 输出数组的shape属性是输入数组的shape属性的各个轴上的最大值。
	* 如果输入数组的某个轴的长度为1或与输出数组的对应轴的长度相同时，这个数组能够用来计算，否则出错。
	* 当输入数组的某个轴的长度为1时，沿着此轴运算时都用此轴上的第一组值。
```python
	a = np.arange(0,60,10).reshape(-1,1)
	b = np.arange(0,5)
	c = a + b
	#c.shape = (6,5)
```

6. 能快速产生能进行广播运算数组的ogrid对象;类似的还有ix_()

####多维数组下标存取
1. 如果下标元组的所有元素都是切片和整数，那么用它作为下标得到的是原始数组的一个视图。
